package com.rks.catalog.controllers;import com.rks.catalog.cart.Cart;import com.rks.catalog.entity.product.Product;import com.rks.catalog.service.ProductServiceImpl;import com.rks.catalog.service.RedisCounterServiceImpl;import com.rks.mcommon.exceptions.TooManyRequestsException;import io.github.bucket4j.Bandwidth;import io.github.bucket4j.Bucket;import io.github.bucket4j.Bucket4j;import io.github.bucket4j.Refill;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import java.time.Duration;import java.util.List;@RestController@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:8080", "http://localhost:9080", "http://localhost:9090"})@RequestMapping("/api/v1")public class ProductController {    private static final Logger log = LoggerFactory.getLogger(ProductController.class);    private ProductServiceImpl productService;    @Autowired    private RedisCounterServiceImpl redisCounterService;    private final Bucket productBucket;    public ProductController(ProductServiceImpl productService) {        this.productService = productService;        Bandwidth limit = Bandwidth.classic(10, Refill.greedy(10, Duration.ofMinutes(1)));        this.productBucket = Bucket4j.builder().addLimit(limit).build();    }    // session scoped POJO    @Autowired    private Cart shoppingCart;    @GetMapping("/products/{id}")    public @ResponseBody Product getById(@PathVariable("id") String productId) {        return productService.getById(productId);    }    @PostMapping("/products")    @ResponseStatus(HttpStatus.CREATED)    public void addProduct(@RequestBody Product product) {        productService.add(product);    }    @GetMapping("/categories/{category}/products")    public List<Product> getProductsForCategory(@PathVariable String category) {        log.info("bucket::" + productBucket.getAvailableTokens());        if (productBucket.tryConsume(1)) {            List<Product> productList = productService.getProductsForCategory(category.toLowerCase());            redisCounterService.increaseCounterInRedis(category.concat("_all-products-counter"));            return productList;        }        throw new TooManyRequestsException("failed", 10202, "Too many requests");    }    @DeleteMapping("/products")    @ResponseStatus(HttpStatus.NO_CONTENT)    public void deleteProduct(String id) {        productService.delete(id);    }    @PostMapping("/cart/addToCart")    public void addToCart(@RequestParam(value = "sku") String sku,                          @RequestParam(value = "quantity") int quantity) {        shoppingCart.addItem(sku, quantity);        log.info(shoppingCart.toString());    }    @GetMapping("/products/search")    public List<Product> search(HttpServletRequest request) {        return productService.search(request.getParameterMap());    }    @GetMapping("/products/searchbysku/{sku}")    Product findBySku(@PathVariable("sku") String sku) {        Product product = productService.getBySku(sku);        return product;    }    @PutMapping("/products")    Product updateProduct(@RequestBody Product product) {        log.info("product={}", product);        Product updatedProduct = productService.update(product);        return product;    }}