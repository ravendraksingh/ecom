package com.rks.catalog.service.impl;import com.rks.catalog.exceptions.ServiceErrorFactory;import com.rks.catalog.domain.category.Category;import com.rks.catalog.repositories.CategoryRepository;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import java.util.List;import static com.rks.catalog.constants.ProductServiceErrorCodes.CATEGORY_NOT_FOUND;import static com.rks.catalog.constants.ProductServiceErrorCodes.PRODUCT_NOT_FOUND;//@CacheConfig(cacheManager = "catalogCM", cacheNames = "catalogCache")@Servicepublic class CategoryServiceImpl {    private static final Logger log = LoggerFactory.getLogger(CategoryServiceImpl.class);    private CategoryRepository categoryRepository;    @Autowired    public CategoryServiceImpl(CategoryRepository categoryRepository) {        this.categoryRepository = categoryRepository;    }    @Value("${memcached.isEnabled:false}")    private boolean cachingEnabled;    //@Cacheable(cacheNames = "categoryCache", keyGenerator = "categoryKeyGenerator", sync = true)    @Cacheable(cacheNames = "categoryCache", key = "'all_categories'", sync = true)    public List<Category> getAllCategories() {        log.info("Fetching all categories");        List<Category> categories = categoryRepository.findAll();        if (categories == null || categories.size() == 0) {            throw ServiceErrorFactory.getNamedException(CATEGORY_NOT_FOUND);        }        return categories;    }    public Category save(Category c) {        return categoryRepository.save(c);    }    public Category getById(String id) {        log.info("Fetching category for category id: {}", id);        return categoryRepository.findById(id).orElseThrow(() -> ServiceErrorFactory.getNamedException(CATEGORY_NOT_FOUND));    }    @Cacheable(cacheNames="categoryCache", keyGenerator = "categoryKeyGenerator")    public List<Category> getCategoriesByNameRegex(String searchString) {        List<Category> categoryList = categoryRepository.findCategoriesByNameRegex(searchString);        log.info("Cache miss!!");        if (categoryList == null || categoryList.size()==0) {            throw ServiceErrorFactory.getNamedException(CATEGORY_NOT_FOUND);        }        return categoryList;    }}