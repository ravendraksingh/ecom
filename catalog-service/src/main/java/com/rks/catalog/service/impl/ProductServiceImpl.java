package com.rks.catalog.service.impl;import com.rks.catalog.dao.ProductSearchDao;import com.rks.catalog.exceptions.ServiceErrorFactory;import com.rks.catalog.domain.product.Product;import com.rks.catalog.repositories.ProductRepository;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.Cacheable;import org.springframework.data.redis.core.StringRedisTemplate;import org.springframework.stereotype.Service;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.concurrent.TimeUnit;import static com.rks.catalog.constants.ProductServiceErrorCodes.PRODUCT_NOT_FOUND;@Servicepublic class ProductServiceImpl {    private Logger logger = LoggerFactory.getLogger(ProductServiceImpl.class);    @Autowired    private ProductSearchDao productSearchDao;    private ProductRepository productRepository;    @Autowired    private StringRedisTemplate stringRedisTemplate;    @Autowired    public ProductServiceImpl(ProductRepository productRepository) {        this.productRepository = productRepository;    }    public Product add(Product product) {        return productRepository.save(product);    }    public void delete(String id) {        productRepository.deleteById(id);    }    public Product getById(String id) {        logger.info("Fetching product for product id: {}", id);        return productRepository.findById(id).orElseThrow(()->ServiceErrorFactory.getNamedException(PRODUCT_NOT_FOUND));    }    @Cacheable(cacheNames = "productCache", key = "#category.concat('_').concat('all-products')")    public List<Product> getProductsForCategory(String category) {        Map<String, String[]> searchCriteriaMap = new HashMap<>();        searchCriteriaMap.put("Category", new String[]{category});        return productSearchDao.searchProducts(searchCriteriaMap);    }    public List<Product> search(Map<String, String[]> searchCriteriaMap) {        return productSearchDao.searchProducts(searchCriteriaMap);    }    public Product getBySku(String sku) {        logger.info("Fetching product details for sku={}", sku);        return productRepository.findBySku(sku);    }}